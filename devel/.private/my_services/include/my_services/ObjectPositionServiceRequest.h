// Generated by gencpp from file my_services/ObjectPositionServiceRequest.msg
// DO NOT EDIT!


#ifndef MY_SERVICES_MESSAGE_OBJECTPOSITIONSERVICEREQUEST_H
#define MY_SERVICES_MESSAGE_OBJECTPOSITIONSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_services
{
template <class ContainerAllocator>
struct ObjectPositionServiceRequest_
{
  typedef ObjectPositionServiceRequest_<ContainerAllocator> Type;

  ObjectPositionServiceRequest_()
    : shape_name()  {
    }
  ObjectPositionServiceRequest_(const ContainerAllocator& _alloc)
    : shape_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _shape_name_type;
  _shape_name_type shape_name;





  typedef boost::shared_ptr< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectPositionServiceRequest_

typedef ::my_services::ObjectPositionServiceRequest_<std::allocator<void> > ObjectPositionServiceRequest;

typedef boost::shared_ptr< ::my_services::ObjectPositionServiceRequest > ObjectPositionServiceRequestPtr;
typedef boost::shared_ptr< ::my_services::ObjectPositionServiceRequest const> ObjectPositionServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_services::ObjectPositionServiceRequest_<ContainerAllocator1> & lhs, const ::my_services::ObjectPositionServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.shape_name == rhs.shape_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_services::ObjectPositionServiceRequest_<ContainerAllocator1> & lhs, const ::my_services::ObjectPositionServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_services

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9b199430e4a77523827a4eb6836d449";
  }

  static const char* value(const ::my_services::ObjectPositionServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9b199430e4a7752ULL;
  static const uint64_t static_value2 = 0x3827a4eb6836d449ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_services/ObjectPositionServiceRequest";
  }

  static const char* value(const ::my_services::ObjectPositionServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string shape_name\n"
;
  }

  static const char* value(const ::my_services::ObjectPositionServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.shape_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectPositionServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_services::ObjectPositionServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_services::ObjectPositionServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "shape_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.shape_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_SERVICES_MESSAGE_OBJECTPOSITIONSERVICEREQUEST_H
