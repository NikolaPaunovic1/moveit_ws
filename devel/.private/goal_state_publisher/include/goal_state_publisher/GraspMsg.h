// Generated by gencpp from file goal_state_publisher/GraspMsg.msg
// DO NOT EDIT!


#ifndef GOAL_STATE_PUBLISHER_MESSAGE_GRASPMSG_H
#define GOAL_STATE_PUBLISHER_MESSAGE_GRASPMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace goal_state_publisher
{
template <class ContainerAllocator>
struct GraspMsg_
{
  typedef GraspMsg_<ContainerAllocator> Type;

  GraspMsg_()
    : width(0.0)
    , speed(0.0)
    , force(0.0)
    , tolerance(0.0)  {
    }
  GraspMsg_(const ContainerAllocator& _alloc)
    : width(0.0)
    , speed(0.0)
    , force(0.0)
    , tolerance(0.0)  {
  (void)_alloc;
    }



   typedef double _width_type;
  _width_type width;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _force_type;
  _force_type force;

   typedef double _tolerance_type;
  _tolerance_type tolerance;





  typedef boost::shared_ptr< ::goal_state_publisher::GraspMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::goal_state_publisher::GraspMsg_<ContainerAllocator> const> ConstPtr;

}; // struct GraspMsg_

typedef ::goal_state_publisher::GraspMsg_<std::allocator<void> > GraspMsg;

typedef boost::shared_ptr< ::goal_state_publisher::GraspMsg > GraspMsgPtr;
typedef boost::shared_ptr< ::goal_state_publisher::GraspMsg const> GraspMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::goal_state_publisher::GraspMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::goal_state_publisher::GraspMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::goal_state_publisher::GraspMsg_<ContainerAllocator1> & lhs, const ::goal_state_publisher::GraspMsg_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width &&
    lhs.speed == rhs.speed &&
    lhs.force == rhs.force &&
    lhs.tolerance == rhs.tolerance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::goal_state_publisher::GraspMsg_<ContainerAllocator1> & lhs, const ::goal_state_publisher::GraspMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace goal_state_publisher

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::goal_state_publisher::GraspMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::goal_state_publisher::GraspMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::goal_state_publisher::GraspMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::goal_state_publisher::GraspMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::goal_state_publisher::GraspMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::goal_state_publisher::GraspMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::goal_state_publisher::GraspMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2d8d59c2ef5005c4a7ec11a7cb27855";
  }

  static const char* value(const ::goal_state_publisher::GraspMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2d8d59c2ef5005cULL;
  static const uint64_t static_value2 = 0x4a7ec11a7cb27855ULL;
};

template<class ContainerAllocator>
struct DataType< ::goal_state_publisher::GraspMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "goal_state_publisher/GraspMsg";
  }

  static const char* value(const ::goal_state_publisher::GraspMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::goal_state_publisher::GraspMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A custom message type for sending commands to a Franka gripper\n"
"# Define the message fields\n"
"float64 width\n"
"float64 speed\n"
"float64 force\n"
"float64 tolerance\n"
;
  }

  static const char* value(const ::goal_state_publisher::GraspMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::goal_state_publisher::GraspMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.speed);
      stream.next(m.force);
      stream.next(m.tolerance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::goal_state_publisher::GraspMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::goal_state_publisher::GraspMsg_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "force: ";
    Printer<double>::stream(s, indent + "  ", v.force);
    s << indent << "tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.tolerance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GOAL_STATE_PUBLISHER_MESSAGE_GRASPMSG_H
